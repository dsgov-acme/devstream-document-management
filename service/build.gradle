
plugins {
	id 'org.springframework.boot' version '3.1.4'
	id 'io.spring.dependency-management' version '1.1.3'
	id 'java'
	id 'com.google.cloud.tools.jib'
	id 'checkstyle'
	id 'jacoco'
	id 'com.diffplug.spotless'
	id 'com.github.spotbugs'
	id 'pmd'
	id 'org.sonarqube'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

apply from: "${rootDir}/gradle/openapi-tools/server.gradle"
apply from: "${rootDir}/gradle/code-quality.gradle"

//def mapstructVersion = '1.4.2.Final'
def mapstructVersion = '1.5.5.Final'
def springdocVersion = '1.6.8'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

dependencies {
	compileOnly 'org.projectlombok:lombok:1.18.30'
	annotationProcessor 'org.projectlombok:lombok:1.18.30'
	annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
	annotationProcessor "com.github.therapi:therapi-runtime-javadoc-scribe:0.13.0"

	compileOnly 'com.google.code.findbugs:annotations:3.0.1'
	compileOnly 'org.springframework.boot:spring-boot-devtools'

	implementation "org.mapstruct:mapstruct:${mapstructVersion}"
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-integration'
	implementation 'com.google.cloud:spring-cloud-gcp-starter-pubsub:4.7.2'
	implementation 'com.google.cloud:spring-cloud-gcp-starter-secretmanager:4.7.2'
	implementation platform('com.google.cloud:libraries-bom:26.5.0')
	implementation 'com.google.cloud:google-cloud-storage'
	implementation 'io.nuvalence.dsgov:dsgov-auth:1.0.0'
	implementation 'commons-io:commons-io:2.11.0'
	implementation 'io.hypersistence:hypersistence-utils-hibernate-60:3.6.0'

	implementation 'io.nuvalence.dsgov:dsgov-logging:1.0.0'
	implementation 'xyz.capybara:clamav-client:2.1.2'
	implementation 'org.apache.tika:tika-core:2.9.0'
	// Database management
	implementation 'org.liquibase:liquibase-core'
	runtimeOnly 'org.postgresql:postgresql:42.6.0'
	testImplementation 'com.h2database:h2:2.2.224'
	testImplementation 'org.mockito:mockito-inline:3.4.6'

	// version bump to address known CVEs
	//implementation 'org.yaml:snakeyaml:1.33'

	implementation 'com.google.cloud:google-cloud-document-ai:2.32.0'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.integration:spring-integration-test'
}

test {
	useJUnitPlatform()
}

jacocoTestReport {
	reports {
		xml.required = true
		html.required = true
	}
}

sonarqube {
	properties {
		property 'sonar.dependencyCheck.htmlReportPath', 'build/reports/dependency-check-report.html'
		property 'sonar.dependencyCheck.jsonReportPath', 'build/reports/dependency-check-report.json'
		property 'sonar.dependencyCheck.summarize', true
	}
}

test.finalizedBy jacocoTestReport
tasks.named('sonarqube').configure {
	dependsOn test
}

tasks.withType(JavaCompile) {
	options.compilerArgs = [
			'-Amapstruct.suppressGeneratorTimestamp=true'
	]
}

bootRun {
	systemProperty 'spring.profiles.active', findProperty('profile') ?: 'local'
}

// Uncomment below for macOS M1 (apple silicon) users seeing this docker warning:
// WARNING: The requested image's platform (linux/arm64/v8) does not match the detected host platform (linux/amd64)
/*
jib {
	from.platforms {
		platform {
			architecture = "arm64"
			os = "linux"
		}
	}
}
 */
